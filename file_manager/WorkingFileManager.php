<?php class FileManager{public function exec_on_folder($arg_folder_name,exec_on_folder_callback$callback,$arg_bool_recursive=false,$arg_depth=0,$arg_postfix=false){if(!$arg_folder_name)return false;if(!file_exists($arg_folder_name))return false;if(!is_dir($arg_folder_name))return false;if($arg_folder_name[strlen($arg_folder_name)-1]!="/")$arg_folder_name.="/";$dir_folder=opendir($arg_folder_name);while($fs_entry=readdir($dir_folder)){if(is_dir($arg_folder_name.$fs_entry)){if($fs_entry=="."||$fs_entry==".."){continue;}if(!$arg_postfix)call_user_func(array(&$callback,"callback"),$arg_folder_name.$fs_entry,true,$arg_depth);if($arg_bool_recursive)$this->exec_on_folder($arg_folder_name.$fs_entry,$callback,$arg_bool_recursive,$arg_depth+1,$arg_postfix);if($arg_postfix)call_user_func(array(&$callback,"callback"),$arg_folder_name.$fs_entry,true,$arg_depth);}else{call_user_func(array(&$callback,"callback"),$arg_folder_name.$fs_entry,false,$arg_depth);}}closedir($dir_folder);return true;}public function list_files_in_folder($path,$recursive=false){$callback=new list_files_in_folder_callback();$this->exec_on_folder($path,$callback,$recursive);return$callback->files;}public function list_folders_in_folder($path,$recursive=false){$callback=new list_folders_in_folder_callback();$this->exec_on_folder($path,$callback,$recursive);return$callback->folders;}public function delete_folder($path){$callback=new delete_folder_callback();$bool_return=$this->exec_on_folder($path,$callback,true,0,true);if($bool_return){rmdir($path);}return$bool_return;}public function empty_folder($path,$recursive=false){$callback=new empty_folder_callback();return$this->exec_on_folder($path,$callback,$recursive,0,true);}public function make_folder_writable($path){$callback=new make_folder_writable_callback();return$this->exec_on_folder($path,$callback,true);}public function make_folder_readonly($path){$callback=new make_folder_readonly_callback();return$this->exec_on_folder($path,$callback,true);}public function chmod_files_in_folder($path,$permissions){$callback=new chmod_files_in_folder_callback();$callback->permissions=$permissions;return$this->exec_on_folder($path,$callback,true);}public function chmod_folders_in_folder($path,$permissions){$callback=new chmod_folders_in_folder_callback();$callback->permissions=$permissions;return$this->exec_on_folder($path,$callback,true);}}class list_files_in_folder_callback implements exec_on_folder_callback{public function callback($path,$is_dir,$depth){if(!$is_dir){sleep(1);$this->files[]=$path;}}}class list_folders_in_folder_callback implements exec_on_folder_callback{public function callback($path,$is_dir,$depth){if($is_dir){$this->folders[]=$path;}}}class delete_folder_callback implements exec_on_folder_callback{public function callback($path,$is_dir,$depth){if($is_dir){rmdir($path);}else{unlink($path);}}}class empty_folder_callback implements exec_on_folder_callback{public function callback($path,$is_dir,$depth){if($is_dir){rmdir($path);}else{unlink($path);}}}class make_folder_writable_callback implements exec_on_folder_callback{public function callback($path,$is_dir,$depth){if($is_dir){chmod($path,0777);}else{chmod($path,0666);}}}class make_folder_readonly_callback implements exec_on_folder_callback{public function callback($path,$is_dir,$depth){if($is_dir){chmod($path,0755);}else{chmod($path,0644);}}}class chmod_files_in_folder_callback implements exec_on_folder_callback{var$permissions;public function callback($path,$is_dir,$depth){if(!$is_dir){chmod($path,$this->permissions);}}}class chmod_folders_in_folder_callback implements exec_on_folder_callback{var$permissions;public function callback($path,$is_dir,$depth){if($is_dir){chmod($path,$this->permissions);}}}interface exec_on_folder_callback{public function callback($path,$is_dir,$depth);}$manager=new FileManager();print_r($manager->list_files_in_folder(dirname(__FILE__),true));
?>